1. From a user's perspective there is very little the user has to do. They just have to call upon the code by typing "gcc graph.c -lm". the "-lm" is essessential since the program uses math.h. After they call upon the code they just have to compile it with ".a/a.out". Once they do this, the graph will immediately appear and at the bottom, it well tell the user what the maximum and minimum are and where they occur.
2. Internally,the code works by first establishing x and y as floats as well as  making y = 0. The program also establishes "maxX, maxY, minX, and minY" as floats so that they can be used to find the minimum and maximum. The essential part of the code operates using a nested for loop. The outer for loop is set to the reange from [0.00,3]0 since that is how long we want the graph to be, and we have x increment by a vlue of 0.2. The outer for loop does the actual calcuation of the function and captures the (rounded) value of y. The inner for loop then prints ("#") y times. This loop is repeated until x is less than or equal to 30 as is established in the outher loop. Also part of the outer loop but not the inner loop, is an if statement with an else-if. This is here to capture the minimum and maximum values of y. In the begining of the program, maxY is set to 0, so if any value of y is bigger than zero, it will be assigned to this new variable. As the loop goes on, if any value of y is greater than the current value of maxY, then that new value will be assigned. The xx value according to that new y value is also stored.  The same process happens for the minimum except in reverse. The minY variable is assigned 100 in the begining because it is an arbitrarily large umber, and whenever there is a shorter y, it will replace whatever value the minY varable had. The according x value is also stored. At the end of the program, there are two print functin to display the minimum and maximum as well as return 0; so that the program can compile correctly. 
3. I verified that the output of the progrem is correct by running it several times and ensuring that what is displayed is what should be. 
