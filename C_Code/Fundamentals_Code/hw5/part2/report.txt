// jrocha3
// report.txt

1. 
From the user's perspective, they are first prompted to type in the name of the file. If the file they entered is not in the directory, then they will get the appropiate error message. Once they type a valid file name, a menu with five options will appear. Option 1 will display all the sayings in the current database. Option 2 will prompt the user for a new saying which will then be added to the database. If the user were to choose option 1 again, the program will print all of the original sayings, as well as the one they added. Option 3 will prompt the user for a string, then check all the sayings in the database and print any that contain that string. If there are no sayings in the database that contain the string the user is looking for, then they will get the appropiate message. Option 4 will save everything currently in the database including anything added by the user and put it into a file called "new_file.txt". Option 5 will quit the program and display a goodbye message.
2.
Internally, the program starts by declaring all the functions and #define-ing MAX as 256, since that will be our limit for the total number of characters in a given string. The first thing main does is intiialize all the necessary variables and declare all the necessary arrays. It then promts the user for a file and checks to see if that file does in fact exist in the directory. If it doesn't, it will give the user the approiate error message. After that, there is a while loop to place all of the sayings in the file into a 2D array called "sayings[][]" and this uses the fgets and strcpy functions. It goes until the end of the file is reached. Aterwards, the rest of the program (except for one print statement for a new line) is a large while loop. Inside the while loop is a the display_options function which displays the menu of options to the user. It is inside the while loop so that it will be called every time the loop runs. If the user enteres "5" the while loop is broken and this effectivley ends the program. Otherwise, for options 1,2,3, and 4, they are covered with else if statements which will call on the corrsponding function to what those options are supposed to do according the menu. There is also an else statement which will display an appropoiate error message incase the user inputs an option that isn't 1,2,3,4, or 5. For choices 2 and 3 it asks the user to enter a string. Since option 2 does this with the fgets function, there is a getchar() function right before it to capture the new line character before it. Also in option two, is the ccount which was used in the previouse while loop. That count is used as the effective size of the sayings array (at least the size of what we care about), if the user wants to input a new saying, the count will increment by one so as to update the effective size. This means that when option 1 is selected it will print the new saying, and if the user wants to enter a second or third or so on saying, it will not override that one that already exists. After main is where the functions are defined. The first one is the diplay_options functions which does exactly as the name implies. The display_current_sayings function also does exactly what the name implies using a for loop. The enter_new)saying function also does exactly as the name implies and it uses the strcpy function which was also used in main. the display_given_word function starts off by initializing a character ch and an int check. It then goes on to a for loop will goes through the sayings array and uses the strstr function to see if the string provided by the user is in the given index of the array. If it is, it will print the array at that index, if it isn't, then the check vallue will be incremented. The purpose of the check integer is to see if the value given by the user ever shows up in the array. If it doesn't, that means that for every i in the for loop, check was incremented by 1 and should equal sz + 1. If this is the case, then the appropiate message will be displayed. Finally, the final function save_new_file does exactly what the name implies. It creates a new file titled "new_file.txt" and uses a for loop and the fputs function to place every sting in the array into this new file. 
3.
To ensure that the program works as it should, I compiled it on my end. I intentionally did things wrong to see if would get the approppiate error messages. This includes typing in a file name that doesn't exist, or typing in an option that doesn't exist like 7. I also tried each option in the same run to ensure that the program did exactly what it should be doing. I also opened the new_file.txt to confirm that it had everything it should. After running it several times and going through every realistic scenario I could think of, I determined that my program ran exactly as it should. 

