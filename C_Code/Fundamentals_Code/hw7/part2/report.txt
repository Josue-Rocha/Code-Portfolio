//report.txt
1. 
From the user's perspective, the are first prompted to enter in the file name, if they enter the name of a file that is not in the directory, then they will get the appropirate error message. After they enter the file name they are presented with a menu of 6 options. Option 1 will display all of the information in the file in a formatted way that makes it more readable. Option 2 will Display all of a certain state's information. When selected, the user will be prompted to enter a state name or abbreviation. Either would work and would present the same information. If the user enters something that does not math a states name or state abbreviation in the file, then the appropiate error message will appear. Options 3 and 4 work pretty much the same way. Only option 3 will just print the state name and its capital and option 4 will print the state name and when it joined the union. Option 5 will prompt the user for a year and display what states joined the union in that year. If no states joined the union for that year, then they will get the appropiate message. Option 6 will quit the program and display a goodbye message. If the user enters an option that is not in between 1-6 then the appropiate error message will appear. 
2.
The program is split in three with a main (usastates.c), header(statesfunc.h), and functions(statesfunc.c) file that are all brought together under a Makefile which creates the executable runstates. The header file just initializes all of the functions and uses typedef to initialize a struct into "States". The fist 25 lines of code in the main file are meant prompt the user for a file, then read that file and place the information into an arry of structs called st_arr. The rest of the code is under an infinite while loop which asks the user for a choice everytime it is cycled through. It also calls the display_options function each time which prints the menu of options each time the loop is run. The user's choice is assigned to the integer variable "choice" and the rest of the while loop depends on the value of "choice". The program runs choice through an if statement and several else if statements. If choice is 6, then it breaks the loop effectivley ending the program. If choice is 1 then the program calls the display_everything function. If choice is 2, 3 of 4 then it prompts the user for a state name or state abbreviation and captures that by using scanf and placing it into the char array state_choice. If choice is 2, then it calls the display_state function and passing through reference state_choice. Same thing for options 3 and 4 only they call the display_capital and display_year functions respectivley. If choice is 5 then the program prompts the usser for a year which it captures in the int variable year_choice using a scanf statement. It then calles the display_all_years functions using year_choice. The last thing in the while loop is an else statement which is there incase the user enters a value not between 1 and 6 and prints an approptiate error message. The final bit of code is the functions file. This file is where the functions are defined. First is the readstates functin which just reads through the file and places the information into a an array of structs. It does this by using an fgets statement to read each individual line in the file and puts it into the temporary string line. For the state name, abbreviation, and capital it uses strcpy to place that string into the right place. It captures said string by using strtok to read the line. For the three strings, the delimeter is a comma, and for the year the delmiter is the end of line character since it is the last piece of data in each line. The program uses the atoi function to convert the string which contains the year into an integer. For each line of the file the program runs through, there the variable count is incremented by one. This is meant to count the number of states in the file and the function returns that value. The display_options just has two printf states, one propmpts the user to select an option and another that prints the menu of options. The display_everything function uses a for loop that goes though st_arr and prints all of the information for each state in a formatted way to make it readable. The display_state, display_capital, and display_year functions all use the same for loops. The for loops checks the choice array (what the user inputed) first with the abbreviation for each state. If the two strings math then the loop stops and the variable "index" records the index at that point. The same thing is done for the state name as well. If neither are matched, then there is an else statesment that gives index the value of the count (sz in the code) plus one. This is so that the value of index in this scenario is something that is predictable (and checkable) and is less than the total number of states (i.e. there is no defined value in the array at the index of that value). If index is the size + 1 then an appropiate error message is printed. If not, then a printf statement is executed. Each of the three functions have their own printf statement for this scenario, display_state prints all the information for one state, displlay_capital prints just the capital of thhe state, and display_year prints the year that state joined the uninon. The final function is the display_all_years function which checks to see what states joined the union in a given year. It does this by first using a for loop to see if any state joined the union in that year, if so then the int variable check is equal to 1 and the loop is broken. If not, than under an else statement the variable check is equal to 0; If check is equal to 1, then there is a printf statement (for visual purposes) then a for loop that prints the names of all the states that joined the union in that year. It does this by comparing the given yaer with the year value in the struct for the given state. If check is not equal to one, then that means that no states joined the union that year and the appropiate message is printed. 
3. 
I ensured that my code worked properly by running it myself several times. I attempted each of the options (and when applicable) for several different states. I also intentionally tried to do things incorrectly to ensure that I would get the appropiate error message. 

